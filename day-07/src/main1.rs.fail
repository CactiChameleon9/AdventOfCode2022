use std::fs;
use std::collections::HashMap;

struct Folder {
	inside: String,
	contains: Vec<String>,
	contain_sizes: Vec<usize>
}

pub fn main() {

	// Read the file as a string
	let file: String = fs::read_to_string("example-input")
		.expect("Should have been able to read the file");

	let lines: Vec<&str> = file.split('\n').collect();

	let folders = process_lines(lines);
}

fn process_lines(lines: Vec<&str>) -> HashMap<&str, Folder>{
	// let mut folders: Vec<Folder> = Vec::new();
	let mut folders: HashMap<&str, Folder> = HashMap::new();
	
	let mut current_dir: Vec<&str> = Vec::new();

	// Process the avalible directories adding them to hash map
	for line in lines {

		if line.is_empty() { break; } // ignore empty

		let line_split: Vec<&str> = line.split(' ').collect();

		// Process current directory
		if &line[0..4] == "$ cd" {
		
			let dir_name: &str = line_split[2];

			// Update the current dir
			if dir_name == ".." { current_dir.pop(); }
			else { current_dir.push(dir_name); }

			// Add the new dir to the hashmap
			let inside: String = current_dir[current_dir.len() - 2].to_string();
			let contains: Vec<String> = Vec::new();
			let contain_sizes: Vec<usize> = Vec::new();
			
			let folder: Folder = Folder{inside, contains, contain_sizes};
			folders.entry(dir_name).or_insert(folder);
			continue;
		}

		// Process information from after ls
		if line_split[0] != "$" {

			// Recreate the old folder and then add to it
			let current_folder_name : &str = current_dir[current_dir.len() - 1];
			let current_folder : &Folder = folders.get(current_folder_name).unwrap();

			let inside: String = current_folder.inside;
			let contains: Vec<String> = current_folder.contains;
			let contain_sizes: Vec<usize> = current_folder.contain_sizes;

			contains.push(line_split[1].to_string());

			let folder: Folder = Folder{inside, contains, contain_sizes};
			folders.insert(current_folder_name, folder);
		}

		
	}


	folders
}
